{"version":3,"file":"static/js/257.19f121ab.chunk.js","mappings":"+QAEaA,EAAYC,EAAAA,EAAAA,IAAH,2DAKTC,EAAWD,EAAAA,EAAAA,IAAH,8KAORE,EAAaF,EAAAA,EAAAA,GAAH,6FAOVG,EAAUH,EAAAA,EAAAA,IAAH,6C,SCiEpB,EA3EqB,WAAO,IAAD,MACjBI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0CF,EAAAA,EAAAA,UAAS,MAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAYpD,OATAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaC,OAAOf,IACjBgB,MAAK,SAAAC,GACJb,EAASa,EAASC,MAClBZ,GAAiB,OAAIW,EAASC,KAAKC,QACpC,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACrB,KAGF,iCACE,0BACE,SAAC,KAAD,CAAMwB,GAAIf,EAAagB,QAAvB,UACE,oBAAQC,KAAK,SAAb,WACE,SAAC,MAAD,IADF,mBAMJ,UAAC7B,EAAD,YACE,SAACF,EAAD,CACEgC,IACExB,EAAMyB,YAAN,UAxBc,mCAwBd,OAAyCzB,EAAMyB,aAAgB,GAEjEC,IAAK1B,EAAM2B,SAEb,4BACE,wBAAK3B,EAAM2B,SACX,wCAAgB3B,EAAM4B,aAAtB,QAEA,sCACA,uBAAI5B,EAAM6B,YAEV,oCACA,SAAClC,EAAD,2BACGO,QADH,IACGA,OADH,EACGA,EAAe4B,KAAI,SAAAC,GAAK,OACvB,wBAAoBA,EAAMC,MAAjBD,EAAME,GADQ,WAD3B,SAII,yBACE,iFAOV,UAACrC,EAAD,YACE,sDACA,2BACE,yBACE,SAAC,KAAD,CAAMyB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAIJ,8BACE,SAAC,EAAAa,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,aAMX,C,uKClFKC,EAAU,4CACVC,EAAW,+BACXC,EAAW,kBAEJC,EAAc,WAGzB,OADiBC,EAAAA,EAAAA,IAAA,UAAaH,GAAb,OADA,uBACA,OAAmCD,GAErD,EAEYzB,EAAe,SAAAsB,GAC1B,IAAMQ,EAAI,iBAAaR,GAEvB,OADiBO,EAAAA,EAAAA,IAAA,UAAaH,GAAb,OAAwBI,GAAxB,OAA+BL,GAA/B,OAAyCE,GAE3D,EAEYI,EAAgC,SAACT,EAAIU,GAChD,IAAMC,EAAO,iBAAaX,EAAb,YAAmBU,GAEhC,OADiBH,EAAAA,EAAAA,IAAA,UAAaH,GAAb,OAAwBO,GAAxB,OAAkCR,GAAlC,OAA4CE,GAE9D,EAEc,SAAeO,EAA9B,+CAAe,OAAf,oBAAe,WAA8BC,GAA9B,gFACPC,EADO,iBACWD,GADX,kBAGYN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,wBACMD,GADN,OACgBE,GADhB,OAC2BS,IAJvC,cAGLjC,EAHK,yBAMJA,GANI,gCAQXK,QAAQC,IAAR,MARW,gF","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","sources/getThemoviedb.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledImg = styled.img`\n  width: 200px;\n  height: 300px;\n`;\n\nexport const BoxMovie = styled.div`\n  display: flex;\n  gap: 14px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n`;\n\nexport const GenresList = styled.ul`\n  display: flex;\n  list-style: none;\n  gap: 10px;\n  padding: 0;'\n`;\n\nexport const BoxInfo = styled.div`\n  margin: 20px 0 0;\n`;\n","import { useEffect, useRef, useState, Suspense } from 'react';\nimport { Link, useParams, Outlet, useLocation } from 'react-router-dom';\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\nimport { getMovieById } from 'sources/getThemoviedb';\nimport {\n  StyledImg,\n  BoxMovie,\n  GenresList,\n  BoxInfo,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [currentGenres, setCurrentGenres] = useState(null);\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n  const POSTER_BASE_URL = 'http://image.tmdb.org/t/p/w500/';\n\n  useEffect(() => {\n    getMovieById(Number(movieId))\n      .then(response => {\n        setMovie(response.data);\n        setCurrentGenres([...response.data.genres]);\n      })\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <>\n      <div>\n        <Link to={backLinkHref.current}>\n          <button type=\"button\">\n            <AiOutlineArrowLeft /> Go back\n          </button>\n        </Link>\n      </div>\n\n      <BoxMovie>\n        <StyledImg\n          src={\n            movie.poster_path ? `${POSTER_BASE_URL}${movie.poster_path}` : ''\n          }\n          alt={movie.title}\n        />\n        <div>\n          <h1>{movie.title}</h1>\n          <p>User Score: {movie.vote_average}%</p>\n\n          <h2>Overview</h2>\n          <p>{movie.overview}</p>\n\n          <h3>Genres</h3>\n          <GenresList>\n            {currentGenres?.map(genre => (\n              <li key={genre.id}>{genre.name}</li>\n            )) ?? (\n              <li>\n                <span>We don't have any genres for this movie</span>\n              </li>\n            )}\n          </GenresList>\n        </div>\n      </BoxMovie>\n\n      <BoxInfo>\n        <span>Additional Information</span>\n        <ul>\n          <li>\n            <Link to=\"Cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"Reviews\">Reviews</Link>\n          </li>\n        </ul>\n\n        <section>\n          <Suspense fallback={<div>Loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </section>\n      </BoxInfo>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY_API = '?api_key=df88ba4f44a5ed712dd0a71f1b3d877c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst LANGUAGE = '&language=en-US';\n\nexport const getTrending = () => {\n  const TRENDING = '/trending/movie/day';\n  const response = axios.get(`${BASE_URL}${TRENDING}${KEY_API}`);\n  return response;\n};\n\nexport const getMovieById = id => {\n  const BYID = `/movie/${id}`;\n  const response = axios.get(`${BASE_URL}${BYID}${KEY_API}${LANGUAGE}`);\n  return response;\n};\n\nexport const getMovieAdditionalInformation = (id, info) => {\n  const CREDITS = `/movie/${id}/${info}`;\n  const response = axios.get(`${BASE_URL}${CREDITS}${KEY_API}${LANGUAGE}`);\n  return response;\n};\n\nexport default async function getSearchMovie(query) {\n  const QUERY = `&query=${query}`;\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie${KEY_API}${LANGUAGE}${QUERY}`\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["StyledImg","styled","BoxMovie","GenresList","BoxInfo","movieId","useParams","useState","movie","setMovie","currentGenres","setCurrentGenres","location","useLocation","backLinkHref","useRef","state","from","useEffect","getMovieById","Number","then","response","data","genres","catch","error","console","log","to","current","type","src","poster_path","alt","title","vote_average","overview","map","genre","name","id","Suspense","fallback","KEY_API","BASE_URL","LANGUAGE","getTrending","axios","BYID","getMovieAdditionalInformation","info","CREDITS","getSearchMovie","query","QUERY"],"sourceRoot":""}